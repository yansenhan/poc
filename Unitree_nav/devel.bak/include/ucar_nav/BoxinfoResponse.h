// Generated by gencpp from file ucar_nav/BoxinfoResponse.msg
// DO NOT EDIT!


#ifndef UCAR_NAV_MESSAGE_BOXINFORESPONSE_H
#define UCAR_NAV_MESSAGE_BOXINFORESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ucar_nav
{
template <class ContainerAllocator>
struct BoxinfoResponse_
{
  typedef BoxinfoResponse_<ContainerAllocator> Type;

  BoxinfoResponse_()
    : pla_x(0.0)
    , pla_y(0.0)
    , road(0.0)  {
    }
  BoxinfoResponse_(const ContainerAllocator& _alloc)
    : pla_x(0.0)
    , pla_y(0.0)
    , road(0.0)  {
  (void)_alloc;
    }



   typedef float _pla_x_type;
  _pla_x_type pla_x;

   typedef float _pla_y_type;
  _pla_y_type pla_y;

   typedef float _road_type;
  _road_type road;





  typedef boost::shared_ptr< ::ucar_nav::BoxinfoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ucar_nav::BoxinfoResponse_<ContainerAllocator> const> ConstPtr;

}; // struct BoxinfoResponse_

typedef ::ucar_nav::BoxinfoResponse_<std::allocator<void> > BoxinfoResponse;

typedef boost::shared_ptr< ::ucar_nav::BoxinfoResponse > BoxinfoResponsePtr;
typedef boost::shared_ptr< ::ucar_nav::BoxinfoResponse const> BoxinfoResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ucar_nav::BoxinfoResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ucar_nav::BoxinfoResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ucar_nav::BoxinfoResponse_<ContainerAllocator1> & lhs, const ::ucar_nav::BoxinfoResponse_<ContainerAllocator2> & rhs)
{
  return lhs.pla_x == rhs.pla_x &&
    lhs.pla_y == rhs.pla_y &&
    lhs.road == rhs.road;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ucar_nav::BoxinfoResponse_<ContainerAllocator1> & lhs, const ::ucar_nav::BoxinfoResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ucar_nav

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ucar_nav::BoxinfoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ucar_nav::BoxinfoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ucar_nav::BoxinfoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ucar_nav::BoxinfoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ucar_nav::BoxinfoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ucar_nav::BoxinfoResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ucar_nav::BoxinfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2ce00a84622f710e839e3b8478187df7";
  }

  static const char* value(const ::ucar_nav::BoxinfoResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2ce00a84622f710eULL;
  static const uint64_t static_value2 = 0x839e3b8478187df7ULL;
};

template<class ContainerAllocator>
struct DataType< ::ucar_nav::BoxinfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ucar_nav/BoxinfoResponse";
  }

  static const char* value(const ::ucar_nav::BoxinfoResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ucar_nav::BoxinfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 pla_x\n"
"float32 pla_y\n"
"float32 road\n"
"\n"
;
  }

  static const char* value(const ::ucar_nav::BoxinfoResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ucar_nav::BoxinfoResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pla_x);
      stream.next(m.pla_y);
      stream.next(m.road);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BoxinfoResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ucar_nav::BoxinfoResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ucar_nav::BoxinfoResponse_<ContainerAllocator>& v)
  {
    s << indent << "pla_x: ";
    Printer<float>::stream(s, indent + "  ", v.pla_x);
    s << indent << "pla_y: ";
    Printer<float>::stream(s, indent + "  ", v.pla_y);
    s << indent << "road: ";
    Printer<float>::stream(s, indent + "  ", v.road);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UCAR_NAV_MESSAGE_BOXINFORESPONSE_H
