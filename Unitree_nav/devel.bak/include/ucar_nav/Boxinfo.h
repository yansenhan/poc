// Generated by gencpp from file ucar_nav/Boxinfo.msg
// DO NOT EDIT!


#ifndef UCAR_NAV_MESSAGE_BOXINFO_H
#define UCAR_NAV_MESSAGE_BOXINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ucar_nav
{
template <class ContainerAllocator>
struct Boxinfo_
{
  typedef Boxinfo_<ContainerAllocator> Type;

  Boxinfo_()
    : header()
    , box_x(0)
    , box_y(0)
    , box_w(0)
    , box_h(0)  {
    }
  Boxinfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , box_x(0)
    , box_y(0)
    , box_w(0)
    , box_h(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _box_x_type;
  _box_x_type box_x;

   typedef uint16_t _box_y_type;
  _box_y_type box_y;

   typedef uint16_t _box_w_type;
  _box_w_type box_w;

   typedef uint16_t _box_h_type;
  _box_h_type box_h;





  typedef boost::shared_ptr< ::ucar_nav::Boxinfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ucar_nav::Boxinfo_<ContainerAllocator> const> ConstPtr;

}; // struct Boxinfo_

typedef ::ucar_nav::Boxinfo_<std::allocator<void> > Boxinfo;

typedef boost::shared_ptr< ::ucar_nav::Boxinfo > BoxinfoPtr;
typedef boost::shared_ptr< ::ucar_nav::Boxinfo const> BoxinfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ucar_nav::Boxinfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ucar_nav::Boxinfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ucar_nav::Boxinfo_<ContainerAllocator1> & lhs, const ::ucar_nav::Boxinfo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.box_x == rhs.box_x &&
    lhs.box_y == rhs.box_y &&
    lhs.box_w == rhs.box_w &&
    lhs.box_h == rhs.box_h;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ucar_nav::Boxinfo_<ContainerAllocator1> & lhs, const ::ucar_nav::Boxinfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ucar_nav

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ucar_nav::Boxinfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ucar_nav::Boxinfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ucar_nav::Boxinfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ucar_nav::Boxinfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ucar_nav::Boxinfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ucar_nav::Boxinfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ucar_nav::Boxinfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "beb47c590a7a389074e521a1e16ec95d";
  }

  static const char* value(const ::ucar_nav::Boxinfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbeb47c590a7a3890ULL;
  static const uint64_t static_value2 = 0x74e521a1e16ec95dULL;
};

template<class ContainerAllocator>
struct DataType< ::ucar_nav::Boxinfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ucar_nav/Boxinfo";
  }

  static const char* value(const ::ucar_nav::Boxinfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ucar_nav::Boxinfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint16 box_x\n"
"uint16 box_y\n"
"uint16 box_w\n"
"uint16 box_h\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ucar_nav::Boxinfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ucar_nav::Boxinfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.box_x);
      stream.next(m.box_y);
      stream.next(m.box_w);
      stream.next(m.box_h);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Boxinfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ucar_nav::Boxinfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ucar_nav::Boxinfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "box_x: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.box_x);
    s << indent << "box_y: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.box_y);
    s << indent << "box_w: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.box_w);
    s << indent << "box_h: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.box_h);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UCAR_NAV_MESSAGE_BOXINFO_H
